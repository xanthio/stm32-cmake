name: VersionCheck

on: [push, pull_request]

jobs:
  TestVersions:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        family: [C0, F0, F1, F2, F3, F4, F7, G0, G4, H5, H7, L0, L1, L4, L5, U0, U5, WB, WL, MP1]
      fail-fast: false
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:

      - uses: actions/checkout@v2

      - name: Get Versions from this repos
        id: get-repo-versions
        run: |
          FAMILY_L=$(echo "${{matrix.family}}" | tr '[:upper:]' '[:lower:]');
          family_src_file=${GITHUB_WORKSPACE}/cmake/stm32/${FAMILY_L}.cmake;
          cube_version=$(sed -rn 's@set\(CUBE_${{matrix.family}}_VERSION(\s+)(.*)\)@\2@p' ${family_src_file});
          echo "Cube version: ${cube_version}";
          echo "CUBE=${cube_version}" >> $GITHUB_OUTPUT;
          cmsis_version=$(sed -rn 's@set\(CMSIS_${{matrix.family}}_VERSION(\s+)(.*)\)@\2@p' ${family_src_file});
          echo "CMSIS version: ${cmsis_version}";
          echo "CMSIS=${cmsis_version}" >> $GITHUB_OUTPUT;
          hal_version=$(sed -rn 's@set\(HAL_${{matrix.family}}_VERSION(\s+)(.*)\)@\2@p' ${family_src_file});
          echo "HAL version: ${hal_version}";
          echo "HAL=${hal_version}" >> $GITHUB_OUTPUT;

      - name: Get Cube version
        id: get-latest-cube
        run: |
          http_code=$(curl --request GET \
            --silent --write-out "%{http_code}" \
            --url "https://api.github.com/repos/STMicroelectronics/STM32Cube${{matrix.family}}/tags" \
            --header "Accept: application/vnd.github+json" \
            --header "Authorization: Bearer $GH_TOKEN" \
            -o body.json );
          if [ "${http_code}" -ne "200" ]; then
            echo "Failed (${http_code}) to get https://api.github.com/repos/STMicroelectronics/STM32Cube${{matrix.family}}/tags";
            exit 1;
          else
            latest_cube_version=$(jq '.[0].name' body.json | sed -rn 's@\"@@gp' );
            echo "Latest Cube Version: ${latest_cube_version}";
          fi
          echo "VERSION=${latest_cube_version}" >> $GITHUB_OUTPUT

      - name: Get CMSIS version
        id: get-latest-cmsis
        run: |
          FAMILY_L=$(echo "${{matrix.family}}" | tr '[:upper:]' '[:lower:]');
          http_code=$(curl --request GET \
            --silent --write-out "%{http_code}" \
            --url "https://api.github.com/repos/STMicroelectronics/cmsis_device_${FAMILY_L}/tags" \
            --header "Accept: application/vnd.github+json" \
            --header "Authorization: Bearer $GH_TOKEN" \
            -o body.json ); \
          if [ "${http_code}" -ne "200" ]; then
            echo "Failed (${http_code}) to get https://api.github.com/repos/STMicroelectronics/cmsis_device_${FAMILY_L}/tags";
            echo "Assume we can use the one from cube";
            latest_cmsis_version="cube";
          else
            latest_cmsis_version=$(jq '.[0].name' body.json | sed -rn 's@\"@@gp' );
          fi
          echo "Latest CMSIS Version: ${latest_cmsis_version}";
          echo "VERSION=${latest_cmsis_version}" >> $GITHUB_OUTPUT

      - name: Get HAL version
        id: get-latest-hal
        run: |
          FAMILY_L=$(echo "${{matrix.family}}" | tr '[:upper:]' '[:lower:]');
          http_code=$(curl --request GET \
            --silent --write-out "%{http_code}" \
            --url "https://api.github.com/repos/STMicroelectronics/stm32${FAMILY_L}xx_hal_driver/tags" \
            --header "Accept: application/vnd.github+json" \
            --header "Authorization: Bearer $GH_TOKEN" \
            -o body.json ); \
          if [ "${http_code}" -ne "200" ]; then
            echo "Failed (${http_code}) to get https://api.github.com/repos/STMicroelectronics/stm32${FAMILY_L}xx_hal_driver/tags";
            echo "Assume we can use the one from cube";
            latest_hal_version="cube";
          else
            latest_hal_version=$(jq '.[0].name' body.json | sed -rn 's@\"@@gp' );
          fi
          echo "Latest HAL Version: ${latest_hal_version}";
          echo "VERSION=${latest_hal_version}" >> $GITHUB_OUTPUT

      - name: Compare versions
        run: |
          if [ x"${{ steps.get-repo-versions.outputs.CUBE }}" != x"${{ steps.get-latest-cube.outputs.VERSION }}" ]; then
            cube_missmatch=1;
            echo "Cube has new version ${{ steps.get-latest-cube.outputs.VERSION}}";
            echo "while version ${{ steps.get-repo-versions.outputs.CUBE }} is used";
          else
            cube_missmatch=0;
          fi
          if [ x"${{ steps.get-repo-versions.outputs.CMSIS}}" != x"${{ steps.get-latest-cmsis.outputs.VERSION }}" ]; then
            cmsis_missmatch=1;
            echo "CMSIS has new version ${{ steps.get-latest-cmsis.outputs.VERSION}}";
            echo "while version ${{ steps.get-repo-versions.outputs.CMSIS }} is used";
          else
            cmsis_missmatch=0;
          fi
          if [ x"${{ steps.get-repo-versions.outputs.HAL }}" != x"${{ steps.get-latest-hal.outputs.VERSION }}" ]; then
            hal_missmatch=1;
            echo "HAL has new version ${{ steps.get-latest-hal.outputs.VERSION}}";
            echo "while version ${{ steps.get-repo-versions.outputs.HAL }} is used";
          else
            hal_missmatch=0;
          fi
          if [ "${cube_missmatch}" -ne "0" ] || [ "${cmsis_missmatch}" -ne "0" ] || [ "${hal_missmatch}" -ne "0" ]; then
            exit 1;
          fi
